let weather = {
    'apiKey': 'cbbcb177c3d759f69c754aa7e0953d6d',
    fetchWeather: function (city) {
        fetch(
            "http://api.openweathermap.org/data/2.5/weather?q="
            + city
            + "&units=metric&appid="
            + this.apiKey
        ).then((res) => res.json())
            .then((data) => {
                if(data.cod == 200) {
                    this.displayWeather(data)
                } else {
                    this.notificationError('Not found');
                }

            });
    },
    displayWeather: function (data) {
        const { name } = data;
        const { icon, description } = data.weather[0];
        const { temp, humidity } = data.main;
        const { speed } = data.wind;

        let htmlWeather = `
        <h2 class="city">Weather in ${name}</h2>
            <div class="block-description">
                <h1 class="temp">${temp.toFixed(1)}&deg;C</h1>
                <img src="https://openweathermap.org/img/wn/${icon}@2x.png" alt="" class="icon">
                <div class="description">${description}</div>                
            </div>
            <div class="humidity">Humidity: ${humidity}%</div>
        <div class="wind">Wind speed: ${speed} km/h</div>`

        document.querySelector('.weather').innerHTML = htmlWeather;
        document.body.style.background = 'url("https://source.unsplash.com/random/1600/? ' + name + '") center / cover no-repeat';
    },

    notificationError: function(message) {
        let htmlMessage = `<div class="message">${message}</div>`;
        document.querySelector('.weather').innerHTML = htmlMessage;
    },

    search: function () {
        loading.show();
        this.fetchWeather(document.querySelector('.search-bar').value)
    },
}

let loading = {
    'htmlLoading': `<div class="loading">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="background: none; shape-rendering: auto; line-height: 1.2em" width="1.2em" height="1.2em" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
        <circle cx="50" cy="50" r="32" stroke-width="8" stroke="#cccccc" stroke-dasharray="50.26548245743669 50.26548245743669" fill="none" stroke-linecap="round">
          <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="0.7042253521126761s" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>
        </circle>
        <!-- [ldio] generated by https://loading.io/ --></svg>
    <div class="content-loading">Loading...</div>
    </div>`,

    show: function() {
        document.querySelector('.weather').innerHTML = this.htmlLoading;
    }
}

document.querySelector('.search button')
    .addEventListener("click", () => {
        weather.search();
        
    })

document.querySelector('.search-bar')
    .addEventListener("keyup", (e) => {
        if (document.querySelector('.search-bar').value == ''){
            document.querySelector('.weather').innerHTML = ""
        }
        if (e.key == 'Enter') {
            weather.search();
        }
    })